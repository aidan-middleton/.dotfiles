#!/usr/bin/env python
import subprocess
import json
import os
import socket
import sys

show_all = 0

def cmd_to_json(cmd):
    try:
        result = subprocess.run(
            cmd.split(),
            capture_output=True,
            text=True,
            check=True
        )
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        print("Command failed:", e)
    except json.JSONDecodeError as e:
        print("Failed to parse JSON:", e)

def get_workspace_info():
    current_workspaces = cmd_to_json("hyprctl workspaces -j")
    active_workspaces = [item["activeWorkspace"]["id"] for item in cmd_to_json("hyprctl monitors -j")]
    workspace_info = []
    if show_all == 1:
        for i in range(1,11):
            match = next((item for item in current_workspaces if item["id"] == i), None)
            if match:
                workspace_info.append({
                    "id": match["id"],
                    "monitor": match["monitorID"],
                    "active": "active" if match["id"] in active_workspaces else "inactive"
                })
            else:
                workspace_info.append({
                    "id": i,
                    "monitor": None,
                    "active": "inactive"
                })
    else:
        unsorted_info = []
        for workspace in current_workspaces:
            unsorted_info.append({
                    "id": workspace["id"],
                    "monitor": workspace["monitorID"],
                    "active": "active" if workspace["id"] in active_workspaces else "inactive"
                })
        workspace_info = sorted(unsorted_info, key=lambda x: x['id'])
    print(json.dumps(workspace_info), flush=True)

get_workspace_info()

sock_path = os.path.join(os.environ["XDG_RUNTIME_DIR"],"hypr",os.environ.get('HYPRLAND_INSTANCE_SIGNATURE', ''),".socket2.sock")
# Connect to the UNIX socket
with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client:
    client.connect(sock_path)
    
    # Wrap the socket in a file-like object to read lines
    with client.makefile('r', buffering=1) as sock_file:
        for line in sock_file:
            line = line.strip()
            if "workspace>>" in line:
                get_workspace_info()


