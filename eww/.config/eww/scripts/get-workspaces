#!/usr/bin/env python3

import json
import os
import re
import socket
import subprocess

def cmd_to_json(cmd):
    '''
    '''
    try:
        result = subprocess.run(
            cmd.split(),
            capture_output=True,
            text=True,
            check=True
        )
        return json.loads(result.stdout)
    except subprocess.CalledProcessError as e:
        print("Command failed:", e)
    except json.JSONDecodeError as e:
        print("Failed to parse JSON:", e)
    return []

def get_icon(client: str) -> str:
    # Get the currently set icon theme
    cmd = "gsettings get org.gnome.desktop.interface icon-theme"
    icon_theme = None
    try:
        result = subprocess.run(
            cmd.split(),
            capture_output=True,
            text=True,
            check=True
        )
        icon_theme = result.stdout.strip().replace("'","")
    except subprocess.CalledProcessError as e:
        print("Command failed:", e)
    # Get default icon theme
    default_path = "/usr/share/icons/default/index.theme"
    default_icon_theme = None
    try:
        with open(default_path, "r", encoding="utf-8") as f:
           for line in f:
                if line.startswith("Inherits="):
                    default_icon_theme = line.strip().split("=", 1)[1]
                    break
    except IOError as e:
        print("Command failed:", e)
    # Get the path the the .destkop file correspond to this icon
    desktop_dirs = [
        "/usr/share/applications/",
        "/usr/local/share/applications/",
        "~/.local/share/applications/",
    ] 
    desktop_path = None
    for dir in desktop_dirs:
        path = os.path.join(dir, f"{client}.desktop")
        if os.path.isfile(path):
            desktop_path = path
            break
    # Get the icon name
    default_icon_name = "application-default-icon" 
    icon_name = default_icon_name
    if desktop_path:
        with open(desktop_path, "r", encoding="utf-8") as f:
            for line in f:
                if line.startswith("Icon="):
                    icon_name = line.strip().split("=", 1)[1]
                    break
    # Generate paths from icon name. (Fall back on defualt them and then default icon.)
    icon_paths = [ 
        f"/usr/share/icons/{icon_theme}/16x16/apps/{icon_name}.svg",
        f"/usr/share/icons/{icon_theme}/16x16/apps/{icon_name}.png",
        f"/usr/share/icons/{default_icon_theme}/16x16/apps/{icon_name}.svg",
        f"/usr/share/icons/{default_icon_theme}/16x16/apps/{icon_name}.png",
        f"/usr/share/icons/{icon_theme}/16x16/apps/{default_icon_name}.svg",
        f"/usr/share/icons/{icon_theme}/16x16/apps/{default_icon_name}.png",
        f"/usr/share/icons/{default_icon_theme}/16x16/apps/{default_icon_name}.svg",
        f"/usr/share/icons/{default_icon_theme}/16x16/apps/{default_icon_name}.png",
    ]
    # Check in order of fall backs for icon theme.
    icon_path = ""
    for path in icon_paths:
        if os.path.exists(path):
            icon_path = path
            break
    return icon_path

def print_workspaces():
    sorted_workspaces = [workspaces[k] for k in sorted(workspaces)]
    print(json.dumps(sorted_workspaces), flush=True)

current_workspace = ""
current_monitor_name = ""
current_monitor_id = 0

special = { }
monitors = { }
workspaces = { }
clients = { }

delimeters = re.compile(r">>|,")

workspaces_initial = cmd_to_json("hyprctl workspaces -j")
monitors_initial = cmd_to_json("hyprctl monitors -j")
clients_initial = cmd_to_json("hyprctl clients -j")

for workspace in workspaces_initial:
    id = workspace["id"]
    workspaces[id] = { }
    workspaces[id]["id"] = workspace["id"]
    workspaces[id]["name"] = workspace["name"]
    workspaces[id]["monitor"] = workspace["monitor"]
    workspaces[id]["monitorID"] = workspace["monitorID"]
    workspaces[id]["isActive"] = False
    workspaces[id]["clients"] = []

for client in clients_initial:
    id = client["workspace"]["id"]
    address = client["address"]
    client_class = client["class"]
    icon = get_icon(client_class)
    workspaces[id]["clients"].append(icon)
    clients["address"] = {"workspace": id, "icon": icon}

for monitor in monitors_initial:
    monitors[monitor["name"]] = int(monitor["id"])
    if monitor["focused"] == True:
        current_monitor_name = monitor["name"]
        current_monitor_id = monitor["id"]
        current_workspace = int(monitor["activeWorkspace"]["id"])
    if monitor["specialWorkspace"]["id"] != 0:
        special_id = int(monitor["specialWorkspace"]["id"])
        special[int(monitor["id"])] = special_id
        workspaces[special_id]["isAvtive"] = True
    active_id = int(monitor["activeWorkspace"]["id"])
    workspaces[active_id]["isActive"] = True
print_workspaces()

sock_path = os.path.join(os.environ["XDG_RUNTIME_DIR"],"hypr",os.environ.get('HYPRLAND_INSTANCE_SIGNATURE', ''),".socket2.sock")
# Connect to the UNIX socket
with socket.socket(socket.AF_UNIX, socket.SOCK_STREAM) as client:
    client.connect(sock_path)
    
    # Wrap the socket in a file-like object to read lines
    with client.makefile('r', buffering=1) as sock_file:
        for line in sock_file:
            line = line.strip()
            arguments = delimeters.split(line)
            match arguments[0]:
                case "focusedmonv2":
                    current_monitor_name = arguments[1]
                    current_monitor_id = int(monitors[arguments[1]])
                    current_workspace = int(arguments[2])
                case "destroyworkspacev2":
                    workspaces.pop(int(arguments[1]))
                    print_workspaces()
                case "workspacev2":
                    old_workspace = int(current_workspace)
                    current_workspace = int(arguments[1])
                    if workspaces.get(old_workspace) != None:
                        workspaces[old_workspace]['isActive'] = False
                    workspaces[current_workspace]['isActive'] = True
                    print_workspaces()
                case "createworkspacev2":
                    id = int(arguments[1])
                    workspaces[id] = { }
                    workspaces[id]["id"] = id
                    workspaces[id]["name"] = arguments[2]
                    workspaces[id]["monitor"] = current_monitor_name
                    workspaces[id]["monitorID"] = current_monitor_id
                    workspaces[id]["isActive"] = False
                    workspaces[id]["clients"] = []
                    print_workspaces()
                case "activespecialv2":
                    monitor = arguments[3]
                    monitor_id = monitors[monitor]
                    if arguments[1] != '':
                        id = int(arguments[1])
                        workspaces[id]["id"] = id
                        workspaces[id]["name"] = arguments[2]
                        workspaces[id]["monitor"] = monitor
                        workspaces[id]["monitorID"] = monitor_id
                        workspaces[id]["isActive"] = True
                        workspaces[id]["clients"] = []
                        special[monitor_id] = id
                    else:
                        id = int(special[monitor_id])
                        workspaces[id]["isActive"] = False 
                    print_workspaces()
                case "openwindow":
                    address = arguments[1]
                    id = int(arguments[2])
                    client_class = arguments[3]
                    icon = get_icon(client_class)
                    workspaces[id]["clients"].append(icon)
                    clients[address] = { "workspace" : id, "icon": icon }
                    print_workspaces()
                case "closewindow":
                    address = arguments[1]
                    client = clients[address]
                    id = client["workspace"]
                    icon = client["icon"]
                    workspaces[id]["clients"].remove(icon)
                    del clients[address]
                    print_workspaces()
