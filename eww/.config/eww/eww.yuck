(defwidget bar []
  (box :orientation "h"
    (workspaces)
    (sidestuff)))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (metric :label "VOL"
            :value volume
            :onchange "pactl set-sink-volume @DEFAULT_SINK@ {}%")
    (metric :label "MEM"
            :value {EWW_RAM.used_mem_perc}
            :onchange "")
    (metric :label "DSK"
            :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
            :onchange "")
    (metric :label "CPU"
            :value { EWW_CPU.avg }
            :onchange "")
    time))

(defwidget workspace [id name monitor active clients] 
  (button :class { "workspace" + " " + (active ? "active" : "inactive") + " " + "ws" + monitor }
          :onclick { "hyprctl dispatch workspace " + id}
    (box :orientation "h" 
         :space-evenly false 
         :spacing 5
      (label :text name)
      (box :orientation "h" 
           :space-evenly false 
           :spacing 2
           :visible {arraylength(clients) > 0}
        (label :text "[")
        (for client in clients
          (image :path client
                 :image-width 12
                 :image-height 12))
        (label :text "]")))))

(deflisten workspaces :initial "[]" "scripts/get-workspaces")

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly false
       :halign "start"
       :spacing 10
    (for workspace in workspaces
      (workspace :id {workspace.id} :name {workspace.name} :monitor {workspace.monitorID} :active {workspace.isActive} :clients {workspace.clients}))))

(defwindow menu
    :monitor 1
    :class "menu"
    :windowtype "toolbar"
    :geometry (geometry
      :x "0%"
      :y "0%"
      :width "100%"
      :height "20px"
      :anchor "top center")
    :reserve (struts :side "top" :distance "4%")
    :stacking "fg"
    :exclusive "false"   
  (box :orientation "h" time))

(defwidget metric [label value onchange]
  (box :class "metric"
       :orientation "h"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value {value == '' ? 0 : value}
           :onchange onchange)))

(defpoll volume :interval "1s" "scripts/get-volume")

(defpoll time :interval "1s" "date '+%r %b %d, %Y'")

(defwindow bar :monitor 0
               :windowtype "dock"
               :geometry (geometry 
               :x "0%"
               :y "0%"
               :width "100%"
               :height "8px"
               :anchor "top center")
               :reserve (struts :side "top" :distance "4%")
               :stacking "fg"
               :exclusive "true"   
  (bar))
